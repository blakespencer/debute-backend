version: "3.8"

services:
  app:
    build:
      context: .
      target: builder # Use builder stage for development
    container_name: backend-app-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    command: npm run dev
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network

  db:
    image: postgres:15-alpine
    container_name: backend-db-dev
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  test-db:
    image: postgres:15-alpine
    container_name: backend-test-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_TEST_DB}
    ports:
      - "5433:5432"
    tmpfs:
      - /var/lib/postgresql/data # Use tmpfs for faster test database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Optional: Redis for caching (if needed in future)
  # redis:
  #   image: redis:7-alpine
  #   container_name: backend-redis
  #   ports:
  #     - '6379:6379'
  #   networks:
  #     - backend-network

volumes:
  postgres_data:

networks:
  backend-network:
    driver: bridge
