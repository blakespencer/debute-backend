// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id          String   @id @default(cuid())
  orderId     String   @unique @map("order_id")
  orderDate   DateTime @map("order_date")
  totalAmount Decimal @db.Decimal(10, 2) // 10 digits total, 2 decimal places
  status      String   @default("completed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Performance indexes for analytics queries
  @@index([orderDate])
  @@index([status])
  @@index([status, orderDate])

  @@map("orders")
}

model ShopifyStore {
  id          String @id @default(cuid())
  shopDomain  String @unique           
  accessToken String                   
  lastSyncAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      ShopifyOrder[]
}

model ShopifyOrder {
  id                     String @id @default(cuid())
  shopifyOrderId         String @unique @map("shopify_order_id")
  legacyResourceId       String @map("legacy_resource_id")        // UnsignedInt64 as String
  number                 Int    @map("number")                    
  name                   String
  
  // Currency context - CONFIRMED from API docs
  currencyCode           String @map("currency_code")             
  presentmentCurrencyCode String @map("presentment_currency_code") 
  
  // Customer Info - CONFIRMED from API docs
  email                  String?
  phone                  String?
  customerAcceptsMarketing Boolean @default(false) @map("customer_accepts_marketing")
  
  // FLATTENED MoneyBag: currentTotalPriceSet 
  currentTotalPriceAmount              Decimal @map("current_total_price_amount")                
  currentTotalPricePresentmentAmount   Decimal? @map("current_total_price_presentment_amount")   
  
  // FLATTENED MoneyBag: currentSubtotalPriceSet
  currentSubtotalPriceAmount           Decimal @map("current_subtotal_price_amount")             
  currentSubtotalPricePresentmentAmount Decimal? @map("current_subtotal_price_presentment_amount") 
  
  // FLATTENED MoneyBag: currentTotalTaxSet
  currentTotalTaxAmount                Decimal? @map("current_total_tax_amount")                 
  currentTotalTaxPresentmentAmount     Decimal? @map("current_total_tax_presentment_amount")     
  
  // Status Fields - CONFIRMED from API docs
  displayFinancialStatus     String @map("display_financial_status")
  displayFulfillmentStatus   String @map("display_fulfillment_status")
  confirmed                  Boolean @default(false)
  closed                     Boolean @default(false)
  cancelledAt                DateTime? @map("cancelled_at")
  cancelReason               String? @map("cancel_reason")
  
  // Additional Fields - CONFIRMED from API docs
  taxesIncluded              Boolean @default(false) @map("taxes_included")
  test                       Boolean @default(false)
  
  // Dates - CONFIRMED from API docs
  createdAt                  DateTime @map("created_at")
  processedAt                DateTime @map("processed_at")
  updatedAt                  DateTime @updatedAt
  
  // Relationships
  storeId                    String @map("store_id")
  store                      ShopifyStore @relation(fields: [storeId], references: [id])
  lineItems                  ShopifyLineItem[]

  // Ensure order names are unique per store (satisfies Shopify's documentation)
  @@unique([storeId, name], name: "unique_order_per_store")

  // Performance indexes for analytics queries
  @@index([createdAt])
  @@index([displayFinancialStatus])
  @@index([storeId, createdAt])
  @@index([displayFinancialStatus, createdAt])

  @@map("shopify_orders")
}

model ShopifyLineItem {
  id                String @id @default(cuid())
  shopifyLineItemId String @unique @map("shopify_line_item_id")
  
  // Product Info
  name              String
  variantTitle      String? @map("variant_title")
  productId         String? @map("product_id")
  variantId         String? @map("variant_id")
  sku               String?
  
  // Quantities & Pricing
  quantity          Int
  currentQuantity   Int @map("current_quantity")
  
  // FLATTENED MoneyBag: Line item pricing (these would be originalUnitPriceSet, etc.)
  originalUnitPriceAmount              Decimal @map("original_unit_price_amount")                
  originalUnitPricePresentmentAmount   Decimal? @map("original_unit_price_presentment_amount")   
  
  originalTotalPriceAmount             Decimal @map("original_total_price_amount")               
  originalTotalPricePresentmentAmount  Decimal? @map("original_total_price_presentment_amount")  
  
  // Fulfillment
  requiresShipping  Boolean @default(true) @map("requires_shipping")
  
  // Relationships
  orderId           String @map("order_id")
  order             ShopifyOrder @relation(fields: [orderId], references: [id])
  
  @@map("shopify_line_items")
}

// SWAP Returns Platform Integration
model SwapStore {
  id            String @id @default(cuid())
  swapStoreId   String @unique @map("swap_store_id")
  apiKey        String @map("api_key")
  storeName     String? @map("store_name")
  lastSyncAt    DateTime? @map("last_sync_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  returns       SwapReturn[]

  @@map("swap_stores")
}

model SwapReturn {
  id               String @id @default(cuid())
  swapReturnId     String @unique @map("swap_return_id") // return_id from API
  orderName        String @map("order_name")
  shopifyOrderId   String @map("shopify_order_id") // SWAP's order_id IS the Shopify order ID
  rma              String // RMA ID
  isMatched        Boolean @default(false) @map("is_matched") // Whether return is matched to Shopify order

  // Return Classification
  typeString       String @map("type_string")
  type             String // JSON array as string: ["Exchange", "Refund"]
  status           String // Closed, Processing, Pending, etc.
  shippingStatus   String @map("shipping_status")
  deliveryStatus   String? @map("delivery_status") // Label-Created, Delivered, etc.
  returnStatus     String? @map("return_status") // needs-review, processed, etc.

  // Financial Information
  total                              Decimal
  handlingFee                        Decimal @map("handling_fee")
  shopNowRevenue                     Decimal @map("shop_now_revenue")
  shopLaterRevenue                   Decimal @map("shop_later_revenue")
  exchangeRevenue                    Decimal @map("exchange_revenue")
  refundRevenue                      Decimal @map("refund_revenue")
  totalAdditionalPayment             Decimal @map("total_additional_payment")
  totalCreditExchangeValue           Decimal @map("total_credit_exchange_value")
  totalRefundValueCustomerCurrency   Decimal @map("total_refund_value_customer_currency")

  // Customer Information
  customerName     String? @map("customer_name")
  customerCurrency String? @map("customer_currency")

  // Tax Information
  totalTax         Decimal? @map("total_tax")
  totalDuty        Decimal? @map("total_duty")
  taxCurrency      String? @map("tax_currency")

  // Additional SWAP API Fields
  submittedAt              DateTime? @map("submitted_at")
  dateClosed               DateTime? @map("date_closed")
  deliveredDate            DateTime? @map("delivered_date")
  shopifyOrderDate         DateTime? @map("shopify_order_date")
  trackingNumber           String? @map("tracking_number")
  shippingCarrier          String? @map("shipping_carrier")
  processed                String? @map("processed")
  processedBy              String? @map("processed_by")
  qualityControlStatus     String? @map("quality_control_status")
  orderAltType             String? @map("order_alt_type")
  elapsedDaysPurchaseToReturn Int? @map("elapsed_days_purchase_to_return")
  tags                     String? @map("tags") // JSON array as string
  customerNationalId       String? @map("customer_national_id")
  customerLocale           String? @map("customer_locale")

  // Address Fields (flattened from billing_address and shipping_address)
  billingCity              String? @map("billing_city")
  billingCountryCode       String? @map("billing_country_code")
  billingPostcode          String? @map("billing_postcode")
  billingStateProvince     String? @map("billing_state_province")
  shippingCity             String? @map("shipping_city")
  shippingCountryCode      String? @map("shipping_country_code")
  shippingPostcode         String? @map("shipping_postcode")
  shippingStateProvince    String? @map("shipping_state_province")

  // Timestamps (from API)
  dateCreated      DateTime @map("date_created")
  dateUpdated      DateTime @map("date_updated")

  // Our internal timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relationships
  storeId          String @map("store_id")
  store            SwapStore @relation(fields: [storeId], references: [id])
  products         SwapProduct[]
  returnReasons    SwapReturnReason[]

  // Performance indexes
  @@index([dateCreated])
  @@index([status])
  @@index([typeString])
  @@index([shopifyOrderId])
  @@index([isMatched])
  @@index([isMatched, shopifyOrderId])
  @@index([storeId, dateCreated])
  @@index([status, dateCreated])
  @@index([deliveryStatus])
  @@index([returnStatus])
  @@index([deliveryStatus, returnStatus])
  @@index([billingCountryCode])
  @@index([shippingCountryCode])
  @@index([billingCountryCode, billingCity])
  @@index([shippingCountryCode, shippingCity])

  @@map("swap_returns")
}

model SwapProduct {
  id                String @id @default(cuid())
  productId         String @map("product_id")
  shopifyProductId  String @map("shopify_product_id")
  productName       String @map("product_name")
  sku               String
  itemCount         Int @map("item_count")
  cost              Decimal
  returnType        String @map("return_type")

  // Complete SWAP API Product Fields
  shopifyVariantId     String? @map("shopify_variant_id")
  orderNumber          String? @map("order_number")
  originalOrderName    String? @map("original_order_name")
  variantName          String? @map("variant_name")
  fullSkuDescription   String? @map("full_sku_description")
  mainReasonId         String? @map("main_reason_id")
  mainReasonText       String? @map("main_reason_text")
  subReasonId          String? @map("sub_reason_id")
  subReasonText        String? @map("sub_reason_text")
  comments             String? @map("comments")
  currency             String? @map("currency")
  vendor               String? @map("vendor")
  collections          String? @map("collections") // JSON array as string
  productAltType       String? @map("product_alt_type")
  grams                Int? @map("grams")
  intakeReason         String? @map("intake_reason")
  tags                 String? @map("tags")
  isFaulty             Boolean @default(false) @map("is_faulty")

  // Relationships
  returnId          String @map("return_id")
  return            SwapReturn @relation(fields: [returnId], references: [id])

  // Performance indexes
  @@index([mainReasonText])
  @@index([productAltType])
  @@index([returnType])
  @@index([vendor])
  @@index([returnId, mainReasonText])

  @@map("swap_products")
}

model SwapReturnReason {
  id        String @id @default(cuid())
  reason    String
  itemCount Int @map("item_count")

  // Relationships
  returnId  String @map("return_id")
  return    SwapReturn @relation(fields: [returnId], references: [id])

  @@map("swap_return_reasons")
}